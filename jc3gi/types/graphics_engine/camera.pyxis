use types::math::Vector2;
use types::math::Vector3;
use types::math::Vector4;
use types::math::Matrix4;
use types::math::Plane;

#[copyable, defaultable, size(3), align(1)]
pub type Corner {
    pub x: u8,
    pub y: u8,
    pub z: u8,
}

#[copyable, defaultable, align(1)]
pub type CameraState {
    /// __int8 m_UseOffCenter : 1;
    /// __int8 m_ScreenshotSeriesRunning : 1;
    /// __int8 m_Ortho : 1;
    /// __int8 m_ComputeView : 1;
    /// __int8 m_DirtyProjection : 1;
    /// __int8 m_IsRenderCamera : 1;
    pub bitfield: u8,
}

#[size(0x5B0)]
pub type Camera {
    pub m_OrthoValues: Vector2,
    pub m_OffCenterTiles: i32,
    pub m_OffCenterTileX: i32,
    pub m_OffCenterTileY: i32,

    #[address(0x14)]
    pub m_PreviousTransformF: Matrix4,
    pub m_TransformF: Matrix4,
    pub m_TransformT0: Matrix4,
    pub m_TransformT1: Matrix4,
    pub m_ShakeTransform: Matrix4,
    pub m_ProjectionF: Matrix4,
    pub m_ViewProjectionF: Matrix4,
    pub m_PreviousProjF: Matrix4,
    pub m_PreviousViewF: Matrix4,
    pub m_PreviousViewProjectionF: Matrix4,
    pub m_Projection: Matrix4,
    pub m_View: Matrix4,
    pub m_ViewProjection: Matrix4,
    pub m_PreviousProj: Matrix4,
    pub m_PreviousView: Matrix4,
    pub m_PreviousViewProjection: Matrix4,
    pub m_FrustumPlane: [Plane; 6],
    pub m_AABNormal: [Vector4; 12],
    pub m_Distance: [f32; 6],
    pub m_ClosestCorner: [Corner; 6],
    pub m_StateBitfield: CameraState,

    #[address(0x560)]
    pub m_ConePos: Vector3,
    pub m_ConeAxis: Vector3,
    pub m_ConeAngleOuterTan: f32,
    pub m_ConeAngleOuterCosReci: f32,
    pub m_FOVT0: f32,
    pub m_FOVT1: f32,
    pub m_FOV: f32,
    pub m_FOVProjFactor: f32,
    pub m_FOVFactor: f32,
    pub m_Near: f32,
    pub m_Far: f32,
    pub m_FactorR: f32,
    pub m_FactorU: f32,
    pub m_AspectRatio: f32,
    pub m_Width: i32,
    pub m_Height: i32,
}