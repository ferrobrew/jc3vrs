use types::math::Vector2;
use types::math::Vector3;
use types::math::Vector4;
use types::math::Matrix4;
use types::math::Plane;

#[copyable, defaultable, size(3), align(1)]
pub type Corner {
    pub x: u8,
    pub y: u8,
    pub z: u8,
}

#[copyable, defaultable, align(1)]
pub type CameraState {
    /// __int8 m_UseOffCenter : 1;
    /// __int8 m_ScreenshotSeriesRunning : 1;
    /// __int8 m_Ortho : 1;
    /// __int8 m_ComputeView : 1;
    /// __int8 m_DirtyProjection : 1;
    /// __int8 m_IsRenderCamera : 1;
    pub bitfield: u8,
}

#[size(0x5B0)]
pub type Camera {
    m_OrthoValues: Vector2,
    m_OffCenterTiles: i32,
    m_OffCenterTileX: i32,
    m_OffCenterTileY: i32,

    #[address(0x14)]
    m_PreviousTransformF: Matrix4,
    m_TransformF: Matrix4,
    m_TransformT0: Matrix4,
    m_TransformT1: Matrix4,
    m_ShakeTransform: Matrix4,
    m_ProjectionF: Matrix4,
    m_ViewProjectionF: Matrix4,
    m_PreviousProjF: Matrix4,
    m_PreviousViewF: Matrix4,
    m_PreviousViewProjectionF: Matrix4,
    m_Projection: Matrix4,
    m_View: Matrix4,
    m_ViewProjection: Matrix4,
    m_PreviousProj: Matrix4,
    m_PreviousView: Matrix4,
    m_PreviousViewProjection: Matrix4,
    m_FrustumPlane: [Plane; 6],
    m_AABNormal: [Vector4; 12],
    m_Distance: [f32; 6],
    m_ClosestCorner: [Corner; 6],
    m_StateBitfield: CameraState,

    #[address(0x560)]
    m_ConePos: Vector3,
    m_ConeAxis: Vector3,
    m_ConeAngleOuterTan: f32,
    m_ConeAngleOuterCosReci: f32,
    m_FOVT0: f32,
    m_FOVT1: f32,
    m_FOV: f32,
    m_FOVProjFactor: f32,
    m_FOVFactor: f32,
    m_Near: f32,
    m_Far: f32,
    m_FactorR: f32,
    m_FactorU: f32,
    m_AspectRatio: f32,
    m_Width: i32,
    m_Height: i32,
}