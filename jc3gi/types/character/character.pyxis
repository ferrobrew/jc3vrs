use types::math::Matrix4;
use types::math::Vector3;
use types::vector_math::AlignedVector3;
use types::vector_math::AlignedQuat;

#[size(0x3540)]
pub type Character {
    #[address(0x1780)]
    pub m_AnimatedModel: AnimatedModel,

    #[address(0x262A)]
    pub m_IsLocalCharacter: bool,

    #[address(0x27F0)]
    pub m_WorldMatrixT0: Matrix4,
    pub m_WorldMatrixT1: Matrix4,
}
impl Character {
    #[address(0x143_AD7_B70)]
    pub fn get_local_player_character() -> *mut Character;

    #[address(0x143_AAE_940)]
    pub fn get_head_position(&self, position: *mut Vector3) -> *mut Vector3;

    #[address(0x143_A99_0A0)]
    pub fn get_safe_index(&self, safe_index: SafeBoneIndex) -> u32;

    #[address(0x143_A99_1B0)]
    pub fn get_safe_bone_matrix(&self, safe_index: SafeBoneIndex, matrix: *mut Matrix4);
}

#[size(0x240)]
pub type AnimatedModel {
    #[address(0x178)]
    pub m_AnimationController: *mut AnimationController,
}

pub type AnimationController {}
impl AnimationController {
    #[address(0x143_6CB_7C0)]
    pub fn get_bone_index(&self, hash: u32) -> u32;

    #[address(0x143_6DA_B60)]
    pub fn get_bone_matrix(&self, index: u32, matrix: *mut Matrix4);

    #[address(0x143_6DA_C90)]
    pub fn get_joint(&self, index: u32, joint: *mut Joint);

    #[address(0x143_6DA_CF0)]
    pub fn set_joint(&mut self, index: u32, joint: *mut Joint);
}

#[copyable, defaultable, align(16), size(0x30)]
pub type Joint {
    pub m_Translation: AlignedVector3,
    pub m_Orientation: AlignedQuat,
    pub m_Scale: AlignedVector3,
}

// Note: We might want to add support for putting this in an impl at some point
#[address(0x142_F2F_301)]
pub extern Character_GoreEnabled: bool;

pub enum SafeBoneIndex : u32 {
    REFERENCE = 0x8EB2FD7C,
    OFFSET = 0x4AAA87DB,
    HIPS = 0x68C6A89F,
    LEFT_FOOT = 0x661134AC,
    RIGHT_FOOT = 0xFF3E004B,
    LEFT_TOE = 0xB31EE9AA,
    RIGHT_TOE = 0xDD2D6F75,
    LEFT_HAND = 0x57C83F95,
    RIGHT_HAND = 0x69E77FA6,
    HEAD = 0xA877D9CC,
    NECK = 0xA1C96158,
    SPINE = 0xE28C84B,
    SPINE1 = 0xE4DBE36F,
    SPINE2 = 0x6FE84908,
    STERNUM = 0x9DCAB8BF,
    LEFT_SHOULDER = 0x8735207D,
    RIGHT_SHOULDER = 0x302EEE80,
    BACK_ATTACH = 0xD8BACD9,
    BACK_ATTACH_2 = 0xB7D0AD64,
    EQUIPPED_EXPLOSIVE = 0xA76A3A31,
    LEFT_HOLSTER = 0x63ABE53F,
    RIGHT_HOLSTER = 0x7BD7F313,
    ATTACH_HAND_RIGHT = 0x65C5D2EB,
    ATTACH_HAND_LEFT = 0x4190BFF7,
    ATTACH_HAND_RIGHT2 = 0x7BF80F49,
    ATTACH_HAND_LEFT2 = 0x5DF39D10,
    RIGHT_HAND_IK_TARGET = 0xF7EEABA9,
    LEFT_HAND_IK_TARGET = 0xA73E08C1,
    RIGHT_FOOT_IK_TARGET = 0x3C57D233,
    LEFT_FOOT_IK_TARGET = 0x88841487,
    AIM_TARGET = 0x9779C400,
    TARGET_REF_1 = 0xBF738093,
    TARGET_REF_2 = 0x3B435687,
    RIGHT_LEG = 0xA89A815D,
    LEFT_LEG = 0x782BF8F9,
    RIGHT_UP_LEG = 0x8F232B15,
    LEFT_UP_LEG = 0x26392BC2,
    RIGHT_ARM = 0x19D4B6CF,
    LEFT_ARM = 0x4DF0A2B1,
    GRAPPLE_ATTACH = 0xF0701AD9,
    GRAPPLE_SHOULDER_ATTACH = 0x3E025881,
    GRAPPLE_DEVICE_ATTACH_BONE = 0x9C12B794,
    CAMERA = 0xB5ADAF2E,
    NORMAL_MAP0 = 0xEF74B54B,
    NORMAL_MAP1 = 0x9BD93BC5,
    NORMAL_MAP2 = 0xF05AB522,
    NORMAL_MAP3 = 0x516EC,
    NORMAL_MAP4 = 0x7CCFF7A2,
    NORMAL_MAP5 = 0xC451D21,
    BONE_AMOUNT = 0xFFFFFFFF,
}
