#[copyable, defaultable, align(4)]
pub type Matrix3 {
    pub data: [f32; 9],
}
backend rust epilogue r#"
    impl From<glam::Mat3> for Matrix3 {
        fn from(m: glam::Mat3) -> Self {
            Self {
                data: m.to_cols_array(),
            }
        }
    }
    impl From<Matrix3> for glam::Mat3 {
        fn from(m: Matrix3) -> Self {
            glam::Mat3::from_cols_array(&m.data)
        }
    }
    impl Matrix3 {
        pub fn as_ptr(&self) -> *const f32 {
            self.data.as_ptr()
        }

        pub fn as_mut_ptr(&mut self) -> *mut f32 {
            self.data.as_mut_ptr()
        }
    }
"#;

#[copyable, defaultable, align(4)]
pub type Matrix4 {
    pub data: [f32; 16],
}
backend rust epilogue r#"
    impl From<glam::Mat4> for Matrix4 {
        fn from(m: glam::Mat4) -> Self {
            Self {
                data: m.to_cols_array(),
            }
        }
    }
    impl From<Matrix4> for glam::Mat4 {
        fn from(m: Matrix4) -> Self {
            glam::Mat4::from_cols_array(&m.data)
        }
    }
    impl Matrix4 {
        pub fn as_ptr(&self) -> *const f32 {
            self.data.as_ptr()
        }

        pub fn as_mut_ptr(&mut self) -> *mut f32 {
            self.data.as_mut_ptr()
        }
    }
"#;

#[copyable, defaultable, align(4)]
pub type Vector2 {
    pub data: [f32; 2],
}
backend rust epilogue r#"
    impl From<glam::Vec2> for Vector2 {
        fn from(v: glam::Vec2) -> Self {
            Self {
                data: [v.x, v.y],
            }
        }
    }
    impl From<Vector2> for glam::Vec2 {
        fn from(v: Vector2) -> Self {
            glam::Vec2::new(v.data[0], v.data[1])
        }
    }
"#;

#[copyable, defaultable, align(4)]
pub type Vector3 {
    pub data: [f32; 3],
}
backend rust epilogue r#"
    impl From<glam::Vec3> for Vector3 {
        fn from(v: glam::Vec3) -> Self {
            Self {
                data: [v.x, v.y, v.z],
            }
        }
    }
    impl From<Vector3> for glam::Vec3 {
        fn from(v: Vector3) -> Self {
            glam::Vec3::new(v.data[0], v.data[1], v.data[2])
        }
    }
"#;

#[copyable, defaultable, align(4)]
pub type Vector4 {
    pub data: [f32; 4],
}
backend rust epilogue r#"
    impl From<glam::Vec4> for Vector4 {
        fn from(v: glam::Vec4) -> Self {
            Self {
                data: [v.x, v.y, v.z, v.w],
            }
        }
    }
    impl From<Vector4> for glam::Vec4 {
        fn from(v: Vector4) -> Self {
            glam::Vec4::new(v.data[0], v.data[1], v.data[2], v.data[3])
        }
    }
"#;

#[copyable, defaultable, align(4)]
pub type Plane {
    pub normal: Vector3,
    pub distance: f32,
}